在本機修改好檔案後，執行：
git add .
git commit -m "你的修改說明"
git push

這樣會把修改推到 GitHub。
再執行：
git push hf main


專案概覽
這個資料夾是一個名為「WAA」的專案，結合 FastAPI 後端服務與純前端頁面，用來產生、模擬與匯出撲克牌靴（shoe）的結果。前端透過 REST API 取得資料，後端則依賴 `waa.py` 中的大型模擬邏輯。

主要資料夾
- `.github/`：僅含 `copilot-instructions.md`，用來描述專案在 GitHub Copilot 上的協作規則。
- `.venv/`：本機虛擬環境，保存安裝的 Python 套件。部署或分享程式碼時通常不會提交。
- `api/`：FastAPI 專案的主要後端程式碼。
  - `app.py`：定義所有 `/api/...` 路由，會載入 `waa` 模組。提供以下功能：產生新靴 (`/api/generate_shoe`)、模擬切牌 (`/api/simulate_cut`)、快速掃描目前局勢 (`/api/scan`)、匯出分析結果 (`/api/export/...`)。
  - `__init__.py`：標記資料夾為 Python 套件。
  - `__pycache__/`：Python 編譯後的快取，可隨時刪除。
- `web/`：純前端資源。
  - `index.html`：乾淨版的 UI 骨架，主要載入 `style.css` 與 `script.js`。
  - `style.css`：頁面樣式。
  - `script.js`：前端互動邏輯，呼叫後端 API 並呈現結果、下載 CSV 等。
- `at/`：內層資料夾，目前僅看到 `api/__pycache__` 等快取，推測是先前複製整個專案後留下的空殼，可確認後刪除或保留作為備份。
- `__pycache__/`：根目錄的 Python 快取檔案。

主要程式與設定檔
- `app.py`（根目錄）：後端的對外進入點，匯出 `api.app` 中的 FastAPI 物件，並在直接執行時使用 Uvicorn 啟動服務。
- `waa.py`：專案的核心演算法與模擬邏輯，提供產生靴、記錄各局結果、統計切牌命中率等功能。`api/app.py` 會呼叫這裡的函式。
- `requirements.txt`： FastAPI + Uvicorn 的套件需求。
- `Dockerfile`：建立容器映像的流程，會安裝依賴、複製程式碼並啟動 `uvicorn app:app`。
- `README.md`：目前僅保留 Hugging Face Spaces 所需的 YAML 前置資訊，尚未撰寫說明內容。

使用介面備忘
- 卡片 1【核心生成】：輸入副數、選擇訊號花色與和局訊號花色後按「創建牌靴」，會一次產生兩種表格格式方便檢視或截圖。
- 卡片 2【模擬】：可設定切牌張數、莊家/閒家點數與本局使用牌數。按「切牌」後左側詳細表格的牌序會依新順序更新；按「掃描」則統計符合條件的局次。
- 卡片 3【統計與導出】：顯示四個花色的剩餘張數，並提供「導出」、「預覽」按鈕。導出時會整合直立式牌靴與命中統計兩份 CSV；預覽則開啟包含列印按鈕的右下角視窗。
- 產生牌靴後左表欄位包含：局數、1 至 6、勝負、閒家牌、莊家牌、閒家點數、莊家點數、顏色序。右表依訊號花色（紅色）與非訊號花色（黑色）標示，格子底色隨牌色呈現淺紅或淺灰。執行切牌後只有左表順序改變，右表維持原狀。

靜態頁面與其他檔案
- `index.html`（根目錄）：單檔版的前端頁面，將 CSS/JS 直接寫入檔案，方便在沒有伺服器時預覽。
- `.gitattributes`、`.gitignore`：Git 設定檔，控制換行符號與忽略項目。
- `waa.py` 執行所產生的 CSV 會透過 API 匯出，預設不會在資料夾中留下實體檔案。
- （已刪除）`123.html.html`：先前的另一份單檔頁面，若不再需要可維持移除。

常見工作流程
1. 啟動後端：`uvicorn app:app --reload`（或使用 Dockerfile）。
2. 於瀏覽器開啟 `web/index.html`（或根目錄的單檔 `index.html`）與後端互動。
3. 若要更改模擬規則，修改 `waa.py` 中的設定常數或對應函式即可。

建議下一步
- 補充 `README.md`，描述專案用途、啟動步驟與 API 說明。
- 確認 `at/` 內是否仍需保留快取資料，視需求整理以保持專案乾淨。
